# coding=UTF-8
import sys
import os
import re
import time
import crc8


data_head = [0x7C,0x00,0x3C,0x00,0xF0,0x0F,0x6E,0x91,0x13,0xEC]

data = [
    0x7C,0x00,0x3C,0x00,0xF0,0x0F,0x6E,0x91,0x13,0xEC,
    0x02,0x0F,0x44,0x02,0x00,0x06,0x32,0x32,0x32,0xFF,0xFF,0x02,0x0F,0xD3,0xFF,0xFF,
    0xFF,0xFF,0xFF,0x02,0x00,0x07,0xFF,0xFF,0xFF,0xFF,0xFF,0x02,0x00,0x08,0xFF,0xFF,
    0xFF,0xFF,0xFF,0x02,0x10,0x4A,0xE7,0x09,0xF6,0x08,0xDF,0xFA,0x80,0x46,0xE7,0x09,
    0xF2,0x08,0xDF,0xFA,0x80,0x3E,0x88,0x82,0x8C,0x83,0xE7,0x09,0xF0,0xA3,0xDF,0xFA,
    0x80,0x32,0xE3,0x09,0xF6,0x08,0xDF,0xFA,0x80,0x78,0xE3,0x09,0xF2,0x08,0xDF,0xFA,
    0x80,0x70,0x88,0x82,0x8C,0x83,0xE3,0x09,0xF0,0xA3,0xDF,0xFA,0x80,0x64,0x89,0x82,
    0x8A,0x83,0xE0,0xA3,0xF6,0x08,0xDF,0xFA,0x80,0x58,0x89,0x82,0x8A,0x83,0xE0,0xA3,
    0xF2,0x08,0xDF,0xFA,0x80,0x4C,0x80,0xD2,0x80,0xFA,0x80,0xC6,0x80,0xD4,0x80,0x69,
    0x80,0xF2,0x80,0x33,0x80,0x10,0x80,0xA6,0x80,0xEA,0x80,0x9A,0x80,0xA8,0x80,0xDA,
    0x80,0xE2,0x80,0xCA,0x80,0x33,0x89,0x82,0x8A,0x83,0xEC,0xFA,0xE4,0x93,0xA3,0xC8,
    0xC5,0x82,0xC8,0xCC,0xC5,0x83,0xCC,0xF0,0xA3,0xC8,0xC5,0x82,0xC8,0xCC,0xC5,0x83,
    0xCC,0xDF,0xE9,0xDE,0xE7,0x80,0x0D,0x89,0x82,0x8A,0x83,0xE4,0x93,0xA3,0xF6,0x08,
    0xDF,0xF9,0xEC,0xFA,0xA9,0xF0,0xED,0xFB,0x22,0x89,0x82,0x8A,0x83,0xEC,0xFA,0xE0,
    0xA3,0xC8,0xC5,0x82,0xC8,0xCC,0xC5,0x83,0xCC,0xF0,0xA3,0xC8,0xC5,0x82,0xC8,0xCC,
    0xC5,0x83,0xCC,0xDF,0xEA,0xDE,0xE8,0x80,0xDB,0x89,0x82,0x8A,0x83,0xE4,0x93,0xA3,
    0xF2,0x08,0xDF,0xF9,0x80,0xCC,0x88,0xF0,0xEF,0x60,0x01,0x0E,0x4E,0x60,0xC3,0x88,
    
    0xF0,0xED,0x24,0x02,0xB4,0x04,0x00,0x50,0xB9,0xF5,0x82,0xEB,0x24,0x02,0xB4,0x04,
    0x00,0x50,0xAF,0x23,0x23,0x45,0x82,0x23,0x90,0x00,0x76,0x73,0xBB,0x01,0x06,0x89,
    0x82,0x8A,0x83,0xE0,0x22,0x50,0x02,0xE7,0x22,0xBB,0xFE,0x02,0xE3,0x22,0x89,0x82,
    0x8A,0x83,0xE4,0x93,0x22,0xE8,0x8F,0xF0,0xA4,0xCC,0x8B,0xF0,0xA4,0x2C,0xFC,0xE9,
    0x8E,0xF0,0xA4,0x2C,0xFC,0x8A,0xF0,0xED,0xA4,0x2C,0xFC,0xEA,0x8E,0xF0,0xA4,0xCD,
    0xA8,0xF0,0x8B,0xF0,0xA4,0x2D,0xCC,0x38,0x25,0xF0,0xFD,0xE9,0x8F,0xF0,0xA4,0x2C,
    0xCD,0x35,0xF0,0xFC,0xEB,0x8E,0xF0,0xA4,0xFE,0xA9,0xF0,0xEB,0x8F,0xF0,0xA4,0xCF,
    0xC5,0xF0,0x2E,0xCD,0x39,0xFE,0xE4,0x3C,0xFC,0xEA,0xA4,0x2D,0xCE,0x35,0xF0,0xFD,
    0xE4,0x3C,0xFC,0x22,0xEB,0x9F,0xF5,0xF0,0xEA,0x9E,0x42,0xF0,0xE9,0x9D,0x42,0xF0,
    0xEC,0x64,0x80,0xC8,0x64,0x80,0x98,0x45,0xF0,0x22,0xEB,0x9F,0xF5,0xF0,0xEA,0x9E,
    0x42,0xF0,0xE9,0x9D,0x42,0xF0,0xE8,0x9C,0x45,0xF0,0x22,0xE8,0x60,0x0F,0xEF,0xC3,
    0x33,0xFF,0xEE,0x33,0xFE,0xED,0x33,0xFD,0xEC,0x33,0xFC,0xD8,0xF1,0x22,0xEC,0xF0,
    0xA3,0xED,0xF0,0xA3,0xEE,0xF0,0xA3,0xEF,0xF0,0x22,0xA8,0x82,0x85,0x83,0xF0,0xD0,
    0x83,0xD0,0x82,0x12,0x01,0xE1,0x12,0x01,0xE1,0x12,0x01,0xE1,0x12,0x01,0xE1,0xE4,
    0x73,0xE4,0x93,0xA3,0xC5,0x83,0xC5,0xF0,0xC5,0x83,0xC8,0xC5,0x82,0xC8,0xF0,0xA3,
    0xC5,0x83,0xC5,0xF0,0xC5,0x83,0xC8,0xC5,0x82,0xC8,0x22,0xE3,0xF5,0xF0,0x09,0xE2
]

#----------------------------------------------------------------------
def crc_high_first( ptr ):
    crc=0xff;
    for iptr in ptr:
        crc ^= iptr;
        for index in range(8):
            if (crc & 0x80):
                # crc = (crc << 1) ^ 0x1d;
                crc = (crc << 1) ^ 0x51;
            else:
                crc = (crc << 1);
            
        # print("crc===%02x" % crc);
    str_crc='0x{:02x}'.format(crc & 0xff)
    # print(str_crc); 

    crc = crc & 0xff
    crcl = crc & 0xf
    crcl = crcl << 1
    crch = crc & 0xf0
    crc = crch | crcl
    return crc

#----------------------------------------------------------------------
def xor_cal( ptr ):
    result_ = 0
    for byte in data:
        result_ ^= byte
    
    return result_

#----------------------------------------------------------------------
if __name__ == "__main__":
    # reload(sys)
    # sys.setdefaultencoding('utf-8')

    hash = crc8.crc8()
    hash.update(bytes(data))
    result = 0

    # result = crc_high_first(data)
    # result = xor_cal(data)
    result = hash.hexdigest()
    print(result)

    # print(hex(result) , len(data))


